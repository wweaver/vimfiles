snippet #!
	#!/usr/bin/env python
# Import
snippet imp
	import ${1:module}
snippet from
	from ${1:module} import ${2:Class}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet foo
	${1:`Filename('$1')`}
# Looping
snippet wh
	while ${1:condition}:
		${2:pass}
snippet while
	while ${1:condition}:
		${2:pass}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:pass}
# If / Else
snippet if if only
	if ${1:True}:
		${2:pass}
snippet if if/else
	if ${1:True}:
		${2:pass}
	else:
		${3:pass}
snippet if if/elif/else
	if ${1:True}:
		${2:pass}
	elif ${3:False}:
		${4:pass}
	else:
		${5:pass}
snippet if var = True if expression else False
	${1:var} = ${3:True} if ${2:expression} else ${4:False}
# List operations
snippet [
	[${1:x} for x in ${2:iterable}]
snippet [if
	[${1:x} for x in ${2:iterable} if ${3:expression}]
snippet {
	{'${1}': '${2}'{$3}}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars}: ${3:action}
# Expand '.' to 'self.'
snippet .
	self.${1}
# if __name__ == ?
snippet ifn
	if __name__ == '${1:__main__}':
		${2:main()}
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	def __${1:init}__(self${2:, }):
		${3:pass}
snippet __repr__
	def __repr__(self):
		return '%s(%s)' % (type(self).__name__, ${1:str(self)})
snippet __iter__(self):
	def __iter__(self):
		for ${2:item} in ${1:self._data}:
			yield ${3:item}
snippet __set
	def __set${1:attr}__(self, key, value):
		return ${2}
snippet __setitem__
	def __setitem__(self, key, value):
		return ${1}
snippet __setattr__
	def __setattr__(self, key, value):
		return ${1}
snippet __get
	def __get${1:attr}__(self, key):
		return ${2}
snippet __getitem__
	def __getitem__(self, key):
		return ${1}
snippet __getattr__
	def __getattr__(self, key):
		return ${1}
snippet __getattribute__
	def __getattribute__(self, key):
		print '__getattribute__(%s)' % key
		return super(${1:ClassName}, self).__getattribute__(key)
# Decorators
snippet prop
	@property
	def ${1:method}(self):
		"""${2}"""
		${3:pass}
snippet cm
	@classmethod
	def ${1:method}(cls, ${2}):
		"""${3}"""
		${4:pass}
snippet sm
	@staticmethod
	def ${1:method}(${2:}):
		"""${3}"""
		${4:pass}
# Printing / Formatting
snippet pprint
	__import__('pprint').pprint(${1})
snippet pr
	print ${1}
snippet pr%
	print '${1:%s}' % (${2})
snippet %
	'${1:%s}' % (${2})
# Models
snippet model
	from sqlalchemy.schema import Column, Index
	from sqlalchemy.types import $5

	from core_models import Model

	__all__ = ['$1']


	class ${1:ModelClass}(Model):
		__tablename__ = '${2:tablename}'

		${3:id} = Column(${4:}${5:Integer}, primary_key=True)
# Testing
snippet test_suite regular
	"""$1 test suite."""
	from unittest2 import TestCase

	from ${2:module} import $1


	class ${1:ClassName}TestCase(TestCase):

		def test_${3:func}(self):
			${4:pass}
snippet test_suite functional
	"""$1 functional test suite."""
	from aw.fixture import FixtureTestCase
	from ${2:my_app}.tests.fixtures import $3


	class ${1:MyApp}TestCase(FixtureTestCase):

		datasets = [${3:ActorData, DirectorData}]

		def test_${4:actor}(self):
			${5:pass}
snippet testsuite kata
	from ${1:script} import ${2:StringCalculator}


	class Test$2(object):

		def setUp(self):
			self${3:.add} = $2()$3

		${4}
snippet testsuite model
	from nose.tools import eq_, ok_, assert_raises
	from sqlalchemy.exc import IntegrityError

	from core_models import ${1:Model}
	from core_models.tests.fixtures import $1Data
	from core_models.tests.integration import ModelTestCase


	class Describe$1(ModelTestCase):

		datasets = [$1Data]

		def setUp(self):
			super(Describe$1, self).setUp()
			self.default = self.get_instance($1Data.${2:uses_defaults})
			self.${3:$1} = self.get_instance($1Data.${4:specifies_all})

		${5}
snippet test
	def test_${1}(self):
		${2:pass}
snippet assert ==
	assert ${1:result} == ${2:expected}, \
		${3:'%s != %s', ($1, $2)}
snippet assert=
	assert ${1:result} == ${2:expected}, \
		${3:'%s != %s', ($1, $2)}
snippet assert in
	assert ${1:result} in ${2:expected}, \
		${3:'%s not in %s', ($1, $2)}
snippet assertin
	assert ${1:result} in ${2:expected}, \
		${3:'%s not in %s', ($1, $2)}
snippet assert True
	assert ${1:result}, '${2}'
snippet StringCalc
	class StringCalculator(object):

		def add(self, string):
			return 0
snippet Exception
	class ${1:Negative}Error(Exception):
		${2:pass}
# Bin script
snippet bin
	#!/usr/bin/env python

	__import__('setproctitle').setproctitle('${1:process-name}')
	__import__('logconfig').setup()

	import logging
	import sys

	from optparse_factory import make_option_parser

	from ${2:module} import ${3:Class}

	log = logging.getLogger(__name__)
	def unhandled_exception(exctype, value, traceback):
	    """Exception handler"""
	    log.fatal('Exiting script with value: (%s)\n%s', value, traceback)
	sys.excepthook = unhandled_exception

	make_option_parser().parse_args()

	$3().run()
# IPython Interactive debugging
snippet ipython
	__import__('IPython').embed()
# SQLAlchemy
snippet query session
	${2:obj} = session.query(${1:Model})${3:.get(id)}
snippet query meta.Session()
	${2:obj} = meta.Session().query(${1:Model})${3:.get(id)}
snippet data
	from fixture import DataSet

	__all__ = ['$1Data']


	class ${1:Model}Data(DataSet):

		class ${2:uses_defaults}(object):
			${4:pass}

		class ${3:specifies_all}(object):
			${5:pass}
# Imports
snippet import SQLAlchemy IntegrityError
	from sqlalchemy.exc import IntegrityError
snippet import SQLAlchemy NoResultFound
	from sqlalchemy.orm.exc import NoResultFound
snippet import SQLAlchemy MultipleResultsFound
	from sqlalchemy.orm.exc import MultipleResultsFound
snippet sa
	from sqlalchemy.${1:orm} import ${2:relationship}
